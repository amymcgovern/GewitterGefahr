"""Converts MYRORSS* data from sparse grid to full grid.

* MYRORSS = Multi-year Reanalysis of Remotely Sensed Storms
"""

import numpy
from gewittergefahr.gg_io import myrorss_io
from gewittergefahr.gg_utils import grids
from gewittergefahr.gg_utils import error_checking

# TODO(thunderhoser): allow creation of non-sparse grid for subset of full
# MYRORSS grid.

MIN_CENTER_LAT_COLUMN = 'min_center_lat_deg'
MAX_CENTER_LAT_COLUMN = 'max_center_lat_deg'
MIN_CENTER_LNG_COLUMN = 'min_center_lng_deg'
MAX_CENTER_LNG_COLUMN = 'max_center_lng_deg'


def sparse_to_full_grid(sparse_grid_table, field_name=None,
                        num_lat_in_grid=None, num_lng_in_grid=None):
    """Converts MYRORSS data from sparse grid to full grid.

    M = number of rows in grid
    N = number of columns in grid

    :param sparse_grid_table: pandas DataFrame in format generated by
        `myrorss_io.read_sparse_grid_from_netcdf`.
    :param field_name: Name of radar field.
    :param num_lat_in_grid: Number of rows (unique grid-point latitudes).
    :param num_lng_in_grid: Number of columns (unique grid-point longitudes).
    :return: full_matrix: M-by-N numpy array with values of radar field.
    """

    error_checking.assert_is_string(field_name)
    error_checking.assert_is_integer(num_lat_in_grid)
    error_checking.assert_is_greater(num_lat_in_grid, 0)
    error_checking.assert_is_integer(num_lng_in_grid)
    error_checking.assert_is_greater(num_lng_in_grid, 0)

    data_start_indices = numpy.ravel_multi_index(
        (sparse_grid_table[myrorss_io.GRID_ROW_COLUMN].values,
         sparse_grid_table[myrorss_io.GRID_COLUMN_COLUMN].values),
        (num_lat_in_grid, num_lng_in_grid))

    data_end_indices = (data_start_indices + sparse_grid_table[
        myrorss_io.NUM_GRID_CELL_COLUMN].values - 1)

    num_data_runs = len(data_start_indices)
    num_data_values = numpy.sum(
        sparse_grid_table[myrorss_io.NUM_GRID_CELL_COLUMN].values).astype(int)

    data_indices = numpy.full(num_data_values, numpy.nan, dtype=int)
    data_values = numpy.full(num_data_values, numpy.nan)
    num_values_added = 0

    for i in range(num_data_runs):
        these_data_indices = range(data_start_indices[i],
                                   data_end_indices[i] + 1)
        this_num_values = len(these_data_indices)

        these_array_indices = range(num_values_added,
                                    num_values_added + this_num_values)
        num_values_added += this_num_values

        data_indices[these_array_indices] = these_data_indices
        data_values[these_array_indices] = sparse_grid_table[field_name].values[
            i]

    full_matrix = numpy.full(num_lat_in_grid * num_lng_in_grid, numpy.nan)
    full_matrix[data_indices] = data_values
    return numpy.reshape(full_matrix, (num_lat_in_grid, num_lng_in_grid))


def sparse_to_full_grid_wrapper(sparse_grid_table, metadata_dict):
    """Converts MYRORSS data from sparse grid to full grid.

    M = number of rows in grid
    N = number of columns in grid

    :param sparse_grid_table: pandas DataFrame in format generated by
        `myrorss_io.read_sparse_grid_from_netcdf`.
    :param metadata_dict: Dictionary in format generated by
        `myrorss_io.read_metadata_from_netcdf`.
    :return: full_matrix: M-by-N numpy array with values of radar field.
    :return: grid_point_latitudes_deg: length-M numpy array of grid-point
        latitudes (deg N).  If grid_point_latitudes_deg is increasing
        (decreasing), latitudes in full_matrix increase (decrease) while going
        down a column.
    :return: grid_point_longitudes_deg: length-N numpy array of grid-point
        longitudes (deg E).  If grid_point_longitudes_deg is increasing
        (decreasing), longitudes in full_matrix increase (decrease) while going
        right across a row.
    """

    min_latitude_deg = metadata_dict[myrorss_io.NW_GRID_POINT_LAT_COLUMN] - (
        metadata_dict[myrorss_io.LAT_SPACING_COLUMN] * (
            metadata_dict[myrorss_io.NUM_LAT_COLUMN] - 1))

    (grid_point_latitudes_deg, grid_point_longitudes_deg) = (
        grids.get_latlng_grid_points(
            min_latitude_deg=min_latitude_deg,
            min_longitude_deg=metadata_dict[
                myrorss_io.NW_GRID_POINT_LNG_COLUMN],
            lat_spacing_deg=metadata_dict[myrorss_io.LAT_SPACING_COLUMN],
            lng_spacing_deg=metadata_dict[myrorss_io.LNG_SPACING_COLUMN],
            num_rows=metadata_dict[myrorss_io.NUM_LAT_COLUMN],
            num_columns=metadata_dict[myrorss_io.NUM_LNG_COLUMN]))

    full_matrix = sparse_to_full_grid(
        sparse_grid_table,
        field_name=metadata_dict[myrorss_io.FIELD_NAME_COLUMN],
        num_lat_in_grid=metadata_dict[myrorss_io.NUM_LAT_COLUMN],
        num_lng_in_grid=metadata_dict[myrorss_io.NUM_LNG_COLUMN])

    return full_matrix, grid_point_latitudes_deg, grid_point_longitudes_deg
